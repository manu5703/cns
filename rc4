# Python3 program for the RC4 algorithm
# for encryption and decryption

# Initialize text and key
plain_text = "001010010010"
key = "101001000001"
n = 3  # No. of bits to consider at a time

# The initial state vector array
S = [i for i in range(0, 2**n)]
key_list = [int(key[i:i + n], 2) for i in range(0, len(key), n)]
pt = [int(plain_text[i:i + n], 2) for i in range(0, len(plain_text), n)]

# Adjust key_list length to match S
if len(S) != len(key_list):
    key_list += key_list[:len(S) - len(key_list)]

# Key Scheduling Algorithm (KSA)
def KSA(S, key_list):
    j = 0
    for i in range(len(S)):
        j = (j + S[i] + key_list[i]) % len(S)
        S[i], S[j] = S[j], S[i]
    return S

# Pseudo-Random Generation Algorithm (PRGA)
def PRGA(S, text_length):
    i = j = 0
    key_stream = []
    for _ in range(text_length):
        i = (i + 1) % len(S)
        j = (j + S[i]) % len(S)
        S[i], S[j] = S[j], S[i]
        t = (S[i] + S[j]) % len(S)
        key_stream.append(S[t])
    return key_stream

# XOR between generated key stream and input text
def XOR(input_text, key_stream):
    return [input_text[i] ^ key_stream[i] for i in range(len(input_text))]

# Encryption function
def encryption():
    print("Plain text:", plain_text)
    print("Key:", key)
    S_init = KSA(S[:], key_list)  # Initial permutation
    key_stream = PRGA(S_init, len(pt))
    cipher_text = XOR(pt, key_stream)
    encrypted_to_bits = ''.join(f"{bin(c)[2:]:0>{n}}" for c in cipher_text)
    print("Cipher text:", encrypted_to_bits)
    return cipher_text

# Decryption function
def decryption(cipher_text):
    S_init = KSA(S[:], key_list)
    key_stream = PRGA(S_init, len(pt))
    original_text = XOR(cipher_text, key_stream)
    decrypted_to_bits = ''.join(f"{bin(p)[2:]:0>{n}}" for p in original_text)
    print("Decrypted text:", decrypted_to_bits)

# Driver Code
cipher_text = encryption()
print("---------------------------------------------------------")
decryption(cipher_text)
